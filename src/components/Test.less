/*
	基础知识
		注释: 
			less 中只有  划线**划线  的文件会被编译到注释中去，而双划线不会
		变量: 
			可以用 @ 声明【属性值】、【属性名】、【选择器】、【URL】
			注意less的变量都是块级作用域
		嵌套: 
			要做 hover 效果时，得用 & 从父级来选子元素，因为 hover 要跟元素平级！
		混合: 
			用点 . 来定义
				混合的类型有
					普通(缺点是会编译到原生 css 中去，增加包体积）
					输出混合(不会编译到原生 css 中去，不会增加包体积）
					带【参数】的混合, 在 () 内可以【 @ 定义变量的行参】, 然后再在【实际运用中】去【实例化这个参数的值】
					带【参数】且有【默认值】
					【引用命名】来传递实参数(场景为其他的都用默认值，就这一个单独传参）
					带条件的混合(匹配模式，🌟建议写在全局中）
					arguments 变量(相当于混合参数的集合) 比如 border 要拆解为三个参数就可以这么写
		计算:
			less 可以在【编译时】进行计算，而不是编译时计算，以节省性能
				只需要一方带单位即可

		继承: 
			extend,不支持继承带混合参数的形式！优点是性能比混合好一些

*/




// 👇定义公共变量
@main-color: #9e016f;
@hover-color-top: #382ad1;
@hover-color-down: #01b777;
@bg-color-one:  #daccff;
@bg-color-two:  #d3ffcc;
@m :margin; //注意！对于【属性名】、【选择器】变量的引用需要加上 {}
@selector-wrap-one: #wrap-one; //注意！对于【属性名】、【选择器】变量的引用需要加上 {}
@selector-wrap-two: #wrap-two; //注意！对于【属性名】、【选择器】变量的引用需要加上 {}
@h: 200px;//👈通过计算得出宽高！


// 👇混合, 相当于公共的样式！！
.wrapFn(@Special-color, @w, @h:280px){ //👈相当于对应的实例要特化【颜色】跟【宽度】, 也可以带有默认值
	margin: auto;
	position: relative;
	width: @w;
	height: @h;
	border-radius: 1.25rem;
	background-color:@Special-color;
	left:50%; //相对于父元素居中
	top:50%; //相对于父元素居中
	margin-left:-200px;
	margin-top:200px;
	display: flex;
}

.centerFn(){ //👈混合方法, 带 () 就不会输出到原生 css 中去，不带 () 就会
	margin: auto;
	position: absolute;
	font-weight: 600;
	font-size: 32px;
	left: 0;
	top: 0;
	right: 0;
	bottom: 0;
	width: 120px;
	height: 120px;
	display: flex;
	align-items: center;
	justify-content: center;
	border-radius: 0.75rem;
	background-color: @main-color;
	transition: all 0.2s ease-in-out;
}

.border(@a,@b,@c){//把三个参数混合成一个参数(比较鸡肋）
	border: @arguments;
}

.widthFn(@w){ //混合 + 计算！！
	width: @w + 50px;
}

// 👆混合, 相当于公共的样式！！





// ——————————————————————————————————————————————————————————————————————————————————————————

* {
	@{m}: 0;  //等价于 margin: 0;
}
  

@{selector-wrap-one}{ //等价于 #wrap
	.wrapFn( #daccff, 300px, 400px );//👈带参数的混合方法的调用! 然后传入【实例化的值】！

	.inner{
		.centerFn(); //👈混合方法的调用！！

		.inner-text{
			font-weight: 600;
			font-size: 32px;
		}	
		&:hover{//& 表示从父级向下选择一级, //⚡️ & 因为 hover 跟 inner-text 是平级关系，所以要用 & 来选择！
			background-color: @hover-color-top;
		}
		
	}
}

@{selector-wrap-two}{
	.wrapFn( #d3ffcc, 200px, @h:600px ); //👈带参数的混合方法的调用! 然后传入【实例化的值】！🔥🔥然后 @h 为命名参数，单独拿出这个来传参数，可以脱离排序

	.inner2{
		.centerFn(); //👈混合方法的调用！！

		.inner-text{
			font-weight: 600;
			font-size: 32px;
		}
		&:hover{//& 表示从父级向下选择一级, //⚡️ & 因为 hover 跟 inner-text 是平级关系，所以要用 & 来选择！
			background-color: @hover-color-down;
		}

		.border(10px, solid, rgb(107, 66, 255)); //👈把传入三个参数，然后通过 arguments 混合成一个参数！
	}
}



// ——————————————————————————————————————————————————————————————————————————————————————————




// 🔥相当于定义了一个样式库, 也可以提升到全局成为公共文件！
@import './styled/triangle.less'; //🔥写法一: 引入全局的【混合】文件! 在全局中定义

/*
//写法二: 在当前文件内定义混合
.triangleStyled(@trianBorder, @trianColor){
	position: absolute;
	left: 0;
	top: 0;
	right: 0;
	bottom: 0;
	width: 0px; 
	height:0px; 
	border-width: @trianBorder;
	border-style: solid;
	border-color: transparent transparent @trianColor transparent; //上 右 下 左
}

*/


// ——————————————————————————————————————————————————————————————————————————————————————————

.triangle{

	 .triangle-border {
		.triangleStyled(D, 80px, #6932ff );
	}
}

// ——————————————————————————————————————————————————————————————————————————————————————————
@import './mixin/center.less';//🔥引入居中的布局

#container-allBox{
	.square-one{
		width: (100 + 100px);
		height:(50 + 50px);
		background-color: #6a019e;
	}
	
	.square-two{
		.widthFn(600); 		//👈混合 + 计算！
		height: @h + 100px; //👈变量属性 + 计算！
		background-color: #b32156;
	}

	:nth-child(3){ //相当于从 container-three 向下选到【第 3 个子元素】！
		.centerFn(); //🔥调用 mixin 的居中方法！
		color: white;
		background-color: #0d0d0d;
	}
}




// ——————————————————————————————————————————————————————————————————————————————————————————
//改变主题色
@dark: #222222;
@light: #ffffe7;

// body {
// 	background-color: @light;
// }

.main-background{
	height: 1000px;
	width: 1000px;
}



.changeBox_light{
	height: 300px;
	width: 300px;
	background-color: @light;
	color: black;
}

.changeBox_dark{
	height: 300px;
	width: 300px;
	background-color: @dark;
	color: white;
}








